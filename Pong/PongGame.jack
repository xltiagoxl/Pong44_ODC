// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/PongGame.jack

/**
 * Represents a Pong game.
 */
class PongGame {

    static PongGame instance; // the singelton, a Pong game instance
    field Bat bat;            // the bat
    field Bat bat2;	      //the second bat
    field Bat bat3;	      // the third bat
    field Bat bat4;           // the fourt bat
    field Ball ball;          // the ball
    field int wall;           // the current wall that the ball is bouncing off of.
    field boolean exit;       // true when the game is over
    field int score;          // the current score.
    field int lastWall;
    field boolean batx1;
    field boolean batx2;
    field boolean batx3;
    field boolean batx4;
    field boolean peg;
    field int cont;
    // The current width of the bat
    field int batWidth;
    field int bat2Width;
    field int bat3Width;
    field int bat4Width;


    /** Constructs a new Pong game. */
    constructor PongGame new() {
	    do Screen.clearScreen();
        let batWidth = 50;			// initial bat size
        let bat2Width = 50;			// initial bat2 size
        let bat3Width = 50;			// initial bat3 size
        let bat4Width = 50;			// initial bat4 size
        let cont = 4;				//number of players
        
        let bat = Bat.new(230, 229, batWidth, 7);
        let bat2 = Bat.new(255, 0, bat2Width, 7);
        let bat3 = Bat.new2(0,110,bat3Width,7);
        let bat4 = Bat.new2(503,110,bat4Width,7);
        let ball = Ball.new(253, 222, 0, 511, 0, 229);
        do ball.setDestination(0,0);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Cont:");
      do Output.moveCursor(22,7);
      do Output.printInt(cont);




	    let exit = false;
      let batx1 = false;		
      let batx2 = false;
      let batx3 = false;
      let batx4 = false;
      let peg = false;
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Pong game, and stores it. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }

    /** Returns the single instance of this Pong game. */
    function PongGame getInstance() {
        return instance;
    }

    /** Starts the game, and andles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();

		/** a series of conditionals that determine whether or not the bat was moved. */
                if(~batx1){
                do bat.move();
                }else{
                do bat.setWidth(0);
                do bat.setHeight(0);
                }

                if(~batx2){
                do bat2.move();
                }else{
                do bat2.setWidth(0);
                do bat2.setHeight(0);
                }

                if(~batx3){
                do bat3.movey();
                }else{
                do bat3.setWidthy(0);
                do bat3.setHeighty(0);
                }

                if(~batx4){
                do bat4.movey();
                }else{
                do bat4.setWidthy(0);
                do bat4.setHeighty(0);
                }
                do moveBall();
                do Sys.wait(50);
            }
	    /**conditional that determines the direction in which the bat moves,
	    *where the left is given by the arrow key to the left and the right is given by the arrow key to the right. */
	    
            if (key = 130) { do bat.setDirection(1); }
	        else {
	            if (key = 132) { do bat.setDirection(2); }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

	    /**conditional that determines the direction in which the bat moves, 
	    *where the left is given by the A key and the right is given by the D key. */
            if (key = 65) {do bat2.setDirection(1); }
	        else {
	            if (key = 68) { do bat2.setDirection(2); }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

	    /** conditional that determines the direction in which the bat moves, 
	    *where up is given by the T key and down is given by the G key. */
            if (key = 84) {do bat3.setDirection(3); }
          else {
              if (key = 71) { do bat3.setDirection(4); }
            else {
                    if (key = 140) { let exit = true; }
            }
            }

	     /** conditional that determines the direction in which the bat moves, 
	    *where up is given by the U key and down is given by the J key. */
            if (key = 85) {do bat4.setDirection(3); }
          else {
              if (key = 74) { do bat4.setDirection(4); }
            else {
                    if (key = 140) { let exit = true; }
            }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();

                if(~batx1){
                do bat.move();


                }else{
                do bat.setWidth(0);
                do bat.setHeight(0);

                }

                if(~batx2){
                do bat2.move();

                }else{
                do bat2.setWidth(0);
                do bat2.setHeight(0);

                }

                if(~batx3){
                do bat3.movey();
                }else{
                do bat3.setWidthy(0);
                do bat3.setHeighty(0);

                }

                if(~batx4){
                do bat4.movey();
                }else{
                do bat4.setWidthy(0);
                do bat4.setHeighty(0);

                }
                do moveBall();

                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }

        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging.
     */
    method void moveBall() {
        var int bouncingDirection, batLeft, batRight, ballLeft, ballRight, bat2Left,bat2Right,bat3Left,bat3Right,bat4Left,bat4Right,
        ballyLeft,ballyRight;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            let batLeft = bat.getLeft();
            let batRight = bat.getRight();
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();
            let bat2Left = bat2.getLeft();
            let bat2Right = bat2.getRight();
            let bat3Left = bat3.getyLeft();
            let bat3Right = bat3.getyRight();
            let bat4Left = bat4.getyLeft();
            let bat4Right = bat4.getyRight();
            let ballyLeft = ball.getyLeft();
            let ballyRight = ball.getyRight();


	    /** A series of conditionals that determine if the ball hits the bat or not. */
            if (wall = 4 & (~batx1) ) {
                let batx1 = (batLeft > ballRight) | (batRight < ballLeft) ;
                if (~batx1) {
                    if (ballRight < (batLeft + 10) ){ let bouncingDirection = -1; }
                    else {
                        if (ballLeft > (batRight - 10)) { let bouncingDirection = 1; }
                    }

                    let batWidth = batWidth - 2;
                    do bat.setWidth(batWidth);

                }else{
                let cont = cont -1;
                do Output.moveCursor(22,7);
                do Output.printInt(cont);
                }
            }



            if (wall = 3 & (~batx2) ) {
                let batx2 = (bat2Left > ballRight) | (bat2Right < ballLeft) ;
                if (~batx2) {
                    if (ballRight < (bat2Left + 10) ){ let bouncingDirection = -1; }
                    else {
                        if (ballLeft > (bat2Right - 10)) { let bouncingDirection = 1; }
                    }

                    let bat2Width = bat2Width - 2;
                    do bat2.setWidth(bat2Width);

                }else{
                let cont = cont -1;
                do Output.moveCursor(22,7);
                do Output.printInt(cont);
                }
            }

            if (wall = 1 & (~batx3)) {
                let batx3 = (bat3Left > ballyRight) | (bat3Right < ballyLeft) ;
                if (~batx3) {
                    if (ballyRight < (bat3Left + 10) ){ let bouncingDirection = -1; }
                    else {
                        if (ballyLeft > (bat3Right - 10)) { let bouncingDirection = 1; }
                    }

                    let bat3Width = bat3Width - 2;
                    do bat3.setWidthy(bat3Width);

                }else{

                let cont = cont -1;
                do Output.moveCursor(22,7);
                do Output.printInt(cont);
                }
            }



            if (wall = 2 & (~batx4)) {
                let batx4 = (bat4Left > ballyRight) | (bat4Right < ballyLeft) ;
                if (~batx4) {
                    if (ballyRight < (bat4Left + 10) ){ let bouncingDirection = -1; }
                    else {
                        if (ballyLeft > (bat4Right - 10)) { let bouncingDirection = 1; }
                    }

                    let bat4Width = bat4Width - 2;
                    do bat4.setWidthy(bat4Width);

                }else{

                let cont = cont -1;
                do Output.moveCursor(22,7);
                do Output.printInt(cont);
                }
            }


            if(cont = 1){
            let exit = true;

            }


            do ball.bounce(bouncingDirection);
        }
        return;
    }
}
