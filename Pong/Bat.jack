// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/Bat.jack

/**
 * A graphical Pong bat.
 * Displayed as a filled horizontal rectangle that has
 * a screen location, a width and a height.
 * Has methods for drawing, erasing, moving left and right,
 * and changing its width (to make the hitting action more challenging).
 * This class should have been called "paddle", following the
 * standard Pong terminology. But, unaware of this terminology,
 * we called it "bat", and then decided to stick to it.
 */
class Bat {

    field int x, y;           // the bat's screen location
    field int width, height;  // the bat's width and height
    field int direction;      // direction of the bat's movement (1 = left, 2 = right, 3 up, 4 dow)

    /** Constructs a new bat with the given location and width. */
    constructor Bat new(int Ax, int Ay, int Awidth, int Aheight) {
        let x = Ax;
        let y = Ay;
        let width = Awidth;
        let height = Aheight;
        let direction = 2;
        do show();
        return this;
    }
    /** the second constructs a new bat with the given location and width. */
    constructor Bat new2(int Ax, int Ay, int Awidth, int Aheight) {
        let x = Ax;
        let y = Ay;
        let width = Awidth;
        let height = Aheight;
        let direction = 3;
        do showy();
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Shows the bat. */
    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }
    
    /** Shows the bat in the y location. */
    method void showy() {
        do Screen.setColor(true);
        do drawy();
        return;
    }

    /** Hides the bat. */
    method void hide() {
        do Screen.setColor(false);
        do draw();
        return;
    }


    /** Hides the bat in the y location. */
    method void hidey() {
        do Screen.setColor(false);
        do drawy();
        return;
    }


    /** Draws the bat. */
    method void draw() {
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

   /** Draws the bat in the y location. */
    method void drawy() {
        do Screen.drawRectangle(x, y, x + height, y + width);
        return;
    }

    /** Sets the bat's direction (0=stop, 1=left, 2=right,3=up , 4 = dow). */
    method void setDirection(int Adirection) {
        let direction = Adirection;
        return;
    }

    /** Returns the bat's left edge. */
    method int getLeft() {
        return x;
    }

    /** Returns the bat's right edge. */
    method int getRight() {
        return x + width;
    }

    /** Returns the bat's up edge. */
    method int getyLeft() {
        return y;
    }

    /** Returns the bat's dow edge. */
    method int getyRight() {
        return y + width;
    }

    /** Sets the bat's width. */
    method void setWidth(int Awidth) {
        do hide();
        let width = Awidth;
        do show();
        return;
    }

    /** Sets the bat's height. */
    method void setHeight(int Aheight) {
        do hide();
        let height = Aheight;
        do show();
        return;
    }

    /** Sets the bat´s height on the y-axis. */
    method void setHeighty(int Aheight) {
        do hidey();
        let height = Aheight;
        do showy();
        return;
    }
	
	
	/** Sets the bat´s width on the y-axis. */
	method void setWidthy(int Awidth) {
        do hidey();
        let width = Awidth;
        do showy();
        return;
    }



    /** Moves the bat one step in the bat's direction. */
    method void move() {
	    if (direction = 1) {
            let x = x - 4;
            if (x < 0) { let x = 0; }
            do Screen.setColor(false);
            do Screen.drawRectangle((x + width) + 1, y, (x + width) + 4, y + height);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + 3, y + height);
        }
        else {
            let x = x + 4;
            if ((x + width) > 503) { let x = 503 - width; }
            do Screen.setColor(false);
            do Screen.drawRectangle(x - 4, y, x - 1, y + height);
            do Screen.setColor(true);
            do Screen.drawRectangle((x + width) - 3, y, x + width, y + height);
        }
        return;
    }


    /** Moves the bat one step in the bat's direction on the y-axis. */
    method void movey() {
      if (direction = 3) {
             let y = y - 4;
             if (y < 7) { let y = 7; }
             do Screen.setColor(false);
             do Screen.drawRectangle(x, (y+width)+1, x+height , (y+width)+ 4);
             do Screen.setColor(true);
             do Screen.drawRectangle(x, y, x + height, y + 3);
         }
         else {
             let y = y + 4;
             if ((y + width) > 230) { let y = 230 - width; }
             do Screen.setColor(false);
             do Screen.drawRectangle(x , y-4, x + height, y -1);
             do Screen.setColor(true);
             do Screen.drawRectangle(x, (y+width)-3, x + height, y + width);
         }
         return;
     }



}
